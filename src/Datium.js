(function(){
/// <reference path="OptionSanitizer.ts" />
/// <reference path="FormatBlocks.ts" />
/// <reference path="DatePart.ts" />
/// <reference path="DisplayParser.ts" />
window['Datium'] = (function () {
    var options;
    return (function () {
        function class_1(opts) {
            this.updateOptions(opts);
        }
        class_1.prototype.updateOptions = function (opts) {
            options = OptionSanitizer.sanitize(opts);
        };
        return class_1;
    })();
})();
var Selection = (function () {
    function Selection(start, end) {
        this.start = start;
        this.end = end;
    }
    return Selection;
})();
var DatepickerInput = (function () {
    function DatepickerInput(element, displayAs, minDate, maxDate) {
        this.element = element;
        this.minDate = minDate;
        this.maxDate = maxDate;
        this.shiftTabDown = false;
        this.tabDown = false;
        this.pasting = false;
        this.textBuffer = '';
        this.keyMap = {
            '48': '0', '96': '0', '49': '1', '97': '1',
            '50': '2', '98': '2', '51': '3', '99': '3',
            '52': '4', '100': '4', '53': '5', '101': '5',
            '54': '6', '102': '6', '55': '7', '103': '7',
            '56': '8', '104': '8', '57': '9', '105': '9',
            '65': 'a', '66': 'b', '67': 'c', '68': 'd',
            '69': 'e', '70': 'f', '71': 'g', '72': 'h',
            '73': 'i', '74': 'j', '75': 'k', '76': 'l',
            '77': 'm', '78': 'n', '79': 'o', '80': 'p',
            '81': 'q', '82': 'r', '83': 's', '84': 't',
            '85': 'u', '86': 'v', '87': 'w', '88': 'x',
            '89': 'y', '90': 'z'
        };
        this.selecting = false;
        this.dateParts = DisplayParser.parse(displayAs);
        this.dateStringRegExp = this.concatRegExp(this.dateParts);
        this.bindEvents();
        this.element.setAttribute('spellcheck', 'false');
        this.update(new Date());
    }
    DatepickerInput.prototype.concatRegExp = function (dateParts) {
        var regExp = '';
        dateParts.forEach(function (datePart) {
            regExp += datePart.getRegExpString();
        });
        return new RegExp("^" + regExp + "$", 'i');
    };
    DatepickerInput.prototype.bindEvents = function () {
        var _this = this;
        this.element.addEventListener('focus', function () { return _this.focus(); });
        this.element.addEventListener('keydown', function (e) { return _this.keydown(e); });
        this.element.addEventListener('paste', function () { return _this.paste(); });
        document.addEventListener('keydown', function (e) {
            if (e.shiftKey && e.keyCode === 9 /* TAB */) {
                _this.shiftTabDown = true;
            }
            else if (e.keyCode === 9 /* TAB */) {
                _this.tabDown = true;
            }
            setTimeout(function () {
                _this.shiftTabDown = false;
                _this.tabDown = false;
            });
        });
        // Prevent Default
        this.element.addEventListener('dragenter', function (e) { return e.preventDefault(); });
        this.element.addEventListener('dragover', function (e) { return e.preventDefault(); });
        this.element.addEventListener('drop', function (e) { return e.preventDefault(); });
        this.element.addEventListener('cut', function (e) { return e.preventDefault(); });
        var caretStart;
        var down = false;
        var mousedown = function () {
            clearInterval(interval);
            down = true;
            _this.element.setSelectionRange(void 0, void 0);
            setTimeout(function () {
                caretStart = _this.element.selectionStart;
            });
        };
        var mouseup = function () {
            if (!down)
                return;
            down = false;
            var pos = _this.element.selectionStart === caretStart ? _this.element.selectionEnd : _this.element.selectionStart;
            _this.selectedIndex = _this.getNearestSelectableIndex(pos);
            if (_this.element.selectionStart > 0 || _this.element.selectionEnd < _this.element.value.length) {
                _this.update();
            }
        };
        var touchstart = function () {
            _this.element.removeEventListener('mousedown', mousedown);
            document.removeEventListener('mouseup', mouseup);
            document.removeEventListener('touchstart', touchstart);
        };
        this.element.addEventListener('mousedown', mousedown);
        document.addEventListener('mouseup', mouseup);
        document.addEventListener('touchstart', touchstart);
        var lastStart;
        var lastEnd;
        var interval = setInterval(function () {
            if (!_this.pasting &&
                (_this.element.selectionStart !== 0 ||
                    _this.element.selectionEnd !== _this.element.value.length) &&
                (_this.element.selectionStart !== lastStart ||
                    _this.element.selectionEnd !== lastEnd)) {
                _this.selectedIndex = _this.getNearestSelectableIndex(_this.element.selectionStart + (_this.element.selectionEnd - _this.element.selectionStart) / 2);
                _this.update();
            }
            lastStart = _this.element.selectionStart;
            lastEnd = _this.element.selectionEnd;
        });
    };
    DatepickerInput.prototype.paste = function () {
        var _this = this;
        this.pasting = true;
        var originalValue = this.element.value;
        setTimeout(function () {
            if (!_this.dateStringRegExp.test(_this.element.value)) {
                _this.element.value = originalValue;
                _this.pasting = false;
                return;
            }
            var newDate = new Date(_this.curDate.valueOf());
            var strPrefix = '';
            _this.dateParts.forEach(function (datePart) {
                var val = _this.element.value.replace(strPrefix, '').match(datePart.getRegExpString())[0];
                strPrefix += val;
                if (!datePart.isSelectable())
                    return;
                newDate = datePart.getDateFromString(newDate, val);
            });
            _this.update(newDate);
            _this.pasting = false;
        });
    };
    DatepickerInput.prototype.keydown = function (e) {
        if ((e.keyCode === 36 /* HOME */ || e.keyCode === 35 /* END */) && e.shiftKey)
            return;
        if (e.keyCode === 67 /* C */ && e.ctrlKey)
            return;
        if (e.keyCode === 65 /* A */ && e.ctrlKey)
            return;
        if (e.keyCode === 86 /* V */ && e.ctrlKey)
            return;
        if ((e.keyCode === 37 /* LEFT */ || e.keyCode === 39 /* RIGHT */) && e.shiftKey)
            return;
        if (e.keyCode === 36 /* HOME */) {
            this.selectedIndex = this.getFirstSelectable();
            this.update();
            e.preventDefault();
        }
        else if (e.keyCode === 35 /* END */) {
            this.selectedIndex = this.getLastSelectable();
            this.update();
            e.preventDefault();
        }
        else if (e.keyCode === 37 /* LEFT */) {
            this.selectedIndex = this.getPreviousSelectable();
            this.update();
            e.preventDefault();
        }
        else if (e.shiftKey && e.keyCode === 9 /* TAB */) {
            var previousSelectable = this.getPreviousSelectable();
            if (previousSelectable !== this.selectedIndex) {
                this.selectedIndex = previousSelectable;
                this.update();
                e.preventDefault();
            }
        }
        else if (e.keyCode === 39 /* RIGHT */) {
            this.selectedIndex = this.getNextSelectable();
            this.update();
            e.preventDefault();
        }
        else if (e.keyCode === 9 /* TAB */) {
            var nextSelectable = this.getNextSelectable();
            if (nextSelectable !== this.selectedIndex) {
                this.selectedIndex = nextSelectable;
                this.update();
                e.preventDefault();
            }
        }
        else if (e.keyCode === 38 /* UP */) {
            var newDate = this.dateParts[this.selectedIndex].increment(this.curDate);
            this.update(newDate);
            e.preventDefault();
        }
        else if (e.keyCode === 40 /* DOWN */) {
            var newDate = this.dateParts[this.selectedIndex].decrement(this.curDate);
            this.update(newDate);
            e.preventDefault();
        }
        else {
            e.preventDefault();
        }
        var keyPressed = this.keyMap[e.keyCode];
        if (e.keyCode === 8 /* BACKSPACE */) {
            this.backspace();
        }
        else if (keyPressed !== void 0) {
            this.textBuffer += keyPressed;
        }
        else if (!e.shiftKey) {
            this.textBuffer = '';
        }
        if (this.textBuffer.length > 0) {
            var orig = this.curDate.valueOf();
            var result = this.dateParts[this.selectedIndex].getDateFromString(this.curDate, this.textBuffer);
            if (result !== void 0 && this.dateParts[this.selectedIndex].getMaxBufferSize(result) !== void 0 && this.textBuffer.length >= this.dateParts[this.selectedIndex].getMaxBufferSize(result)) {
                this.selectedIndex = this.getNextSelectable();
            }
            if (result === void 0) {
                this.textBuffer = this.textBuffer.slice(0, this.textBuffer.length - 1);
            }
            else {
                this.update(result);
            }
        }
    };
    DatepickerInput.prototype.backspace = function () {
        if (this.textBuffer.length < 2) {
            var orig = this.curDate.valueOf();
            var result = this.dateParts[this.selectedIndex].getDateFromString(this.curDate, 'ZERO_OUT');
            if (result.valueOf() !== orig) {
                this.update(result);
            }
        }
        this.textBuffer = this.textBuffer.slice(0, this.textBuffer.length - 1);
    };
    DatepickerInput.prototype.getPreviousSelectable = function () {
        var index = this.selectedIndex;
        while (--index >= 0) {
            if (this.dateParts[index].isSelectable())
                return index;
        }
        return this.selectedIndex;
    };
    DatepickerInput.prototype.getNextSelectable = function () {
        var index = this.selectedIndex;
        while (++index < this.dateParts.length) {
            if (this.dateParts[index].isSelectable())
                return index;
        }
        return this.selectedIndex;
    };
    DatepickerInput.prototype.getNearestSelectableIndex = function (caretPosition) {
        var pos = 0;
        var nearestSelectableIndex;
        var nearestSelectableDistance;
        for (var i = 0; i < this.dateParts.length; i++) {
            if (this.dateParts[i].isSelectable()) {
                var fromLeft = caretPosition - pos;
                var fromRight = caretPosition - (pos + this.dateParts[i].toString().length);
                if (fromLeft > 0 && fromRight < 0)
                    return i;
                var dist = Math.min(Math.abs(fromLeft), Math.abs(fromRight));
                if (nearestSelectableIndex == void 0 || dist <= nearestSelectableDistance) {
                    nearestSelectableIndex = i;
                    nearestSelectableDistance = dist;
                }
            }
            pos += this.dateParts[i].toString().length;
        }
        return nearestSelectableIndex;
    };
    DatepickerInput.prototype.focus = function () {
        var _this = this;
        if (this.tabDown) {
            this.selectedIndex = this.getFirstSelectable();
            setTimeout(function () {
                _this.update();
            });
        }
        else if (this.shiftTabDown) {
            this.selectedIndex = this.getLastSelectable();
            setTimeout(function () {
                _this.update();
            });
        }
    };
    DatepickerInput.prototype.getFirstSelectable = function () {
        for (var i = 0; i < this.dateParts.length; i++) {
            if (this.dateParts[i].isSelectable())
                return i;
        }
        return void 0;
    };
    DatepickerInput.prototype.getLastSelectable = function () {
        for (var i = this.dateParts.length - 1; i >= 0; i--) {
            if (this.dateParts[i].isSelectable())
                return i;
        }
        return void 0;
    };
    DatepickerInput.prototype.update = function (date) {
        if (date === void 0)
            date = this.curDate;
        if (this.minDate !== void 0 && date.valueOf() < this.minDate.valueOf())
            date = new Date(this.minDate.valueOf());
        if (this.maxDate !== void 0 && date.valueOf() < this.maxDate.valueOf())
            date = new Date(this.maxDate.valueOf());
        if (this.selectedIndex !== this.lastSelectedIndex) {
            this.textBuffer = '';
        }
        this.lastSelectedIndex = this.selectedIndex;
        this.curDate = new Date(date.valueOf());
        var dateString = '';
        this.dateParts.forEach(function (datePart) {
            dateString += datePart.setValue(date).toString();
        });
        this.element.value = dateString;
        this.updateSelection();
    };
    DatepickerInput.prototype.updateSelection = function () {
        if (this.selectedIndex === void 0 || document.activeElement !== this.element)
            return;
        var start = 0;
        for (var i = 0; i < this.selectedIndex; i++) {
            start += this.dateParts[i].toString().length;
        }
        var end = start + this.dateParts[this.selectedIndex].toString().length;
        this.element.setSelectionRange(start, end);
    };
    return DatepickerInput;
})();
exports["default"] = DatepickerInput;
})();
//# sourceMappingURL=data:application/json;base64,
