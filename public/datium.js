(function(){
window['Datium'] = (function () {
    function Datium(options) {
        var internals = new DatiumInternals(options);
        this.update = internals.update;
    }
    return Datium;
})();
var DatiumInternals = (function () {
    function DatiumInternals(options) {
        var _this = this;
        this.input = new Input();
        this.update = function (options) {
            _this.options = OptionSanitizer.sanitize(options);
            _this.input.update(_this.options);
        };
        this.update(options);
    }
    return DatiumInternals;
})();
var OptionSanitizer = (function () {
    function OptionSanitizer() {
    }
    OptionSanitizer.sanitizeElement = function (element) {
        if (element === void 0)
            throw 'Element must be defined';
        return element;
    };
    OptionSanitizer.sanitizeDisplayAs = function (displayAs) {
        if (displayAs === void 0)
            return 'YYYY mmm ddd';
        if (typeof displayAs !== 'string')
            throw 'Display as must be a string';
        return displayAs;
    };
    OptionSanitizer.sanitize = function (options) {
        return {
            element: OptionSanitizer.sanitizeElement(options['element']),
            displayAs: OptionSanitizer.sanitizeDisplayAs(options['displayAs'])
        };
    };
    return OptionSanitizer;
})();
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PlainText = (function () {
    function PlainText(text) {
        var _this = this;
        this.text = text;
        this.increment = function () { return null; };
        this.decrement = function () { return null; };
        this.setValue = function (value) { return null; };
        this.getRegEx = function () { return null; };
        this.toString = function () { return _this.text; };
    }
    return PlainText;
})();
var formatBlocks = (function () {
    var formatBlocks = {};
    var DatePart = (function () {
        function DatePart() {
            var _this = this;
            this.increment = function () {
                if (_this.date === void 0)
                    return void 0;
            };
        }
        return DatePart;
    })();
    formatBlocks['YYYY'] = (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var _this = this;
            _super.apply(this, arguments);
            this.increment = function () {
                return _super.prototype.increment.call(_this);
            };
            this.decrement = function () {
                return null;
            };
            this.setValue = function (value) {
                return null;
            };
            this.getRegEx = function () { return '\\d{4,4}'; };
            this.toString = function () {
                if (_this.date === void 0)
                    return '----';
                return _this.date.getFullYear().toString();
            };
        }
        return class_1;
    })(DatePart);
    return formatBlocks;
})();
var Input = (function () {
    function Input() {
    }
    Input.prototype.update = function (options) {
        this.options = options;
        this.dateParts = Parser.parse(options.displayAs);
        var dateString = '';
        console.log(options.displayAs);
        this.dateParts.forEach(function (datePart) {
            dateString += datePart.toString();
        });
        console.log(dateString);
    };
    return Input;
})();
var Parser = (function () {
    function Parser() {
    }
    Parser.parse = function (format) {
        var textBuffer = '';
        var dateParts = [];
        var index = 0;
        var inEscapedSegment = false;
        var pushPlainText = function () {
            if (textBuffer.length > 0) {
                dateParts.push(new PlainText(textBuffer));
                textBuffer = '';
            }
        };
        while (index < format.length) {
            if (!inEscapedSegment && format[index] === '[') {
                inEscapedSegment = true;
                index++;
                continue;
            }
            if (inEscapedSegment && format[index] === ']') {
                inEscapedSegment = false;
                index++;
                continue;
            }
            if (inEscapedSegment) {
                textBuffer += format[index];
                index++;
                continue;
            }
            var found = false;
            for (var code in formatBlocks) {
                if (Parser.findAt(format, index, "{" + code + "}")) {
                    pushPlainText();
                    dateParts.push(new formatBlocks[code]());
                    index += code.length + 2;
                    found = true;
                    break;
                }
                else if (Parser.findAt(format, index, code)) {
                    pushPlainText();
                    dateParts.push(new formatBlocks[code]());
                    index += code.length;
                    found = true;
                    break;
                }
            }
            if (!found) {
                textBuffer += format[index];
                index++;
            }
        }
        pushPlainText();
        return dateParts;
    };
    Parser.findAt = function (str, index, search) {
        return str.slice(index, index + search.length) === search;
    };
    return Parser;
})();
var Picker = (function () {
    function Picker() {
    }
    Picker.prototype.update = function (options) {
    };
    return Picker;
})();
}());
//# sourceMappingURL=data:application/json;base64,
